                  Library vs Framework 
-> Library : A library is a collection of pre-written code that can be used to perform specific tasks.
-> Full control in our hands in using the Library

-> Framework : A Framework is a set of pre-written code that provides a structure for developing software Applications.
-> Fully controlled by Frameworks

*********    Express.js    ***********
-> A Node.js web Application Framework that helps us to make the web applications .
-> It is used for server side Programming.

We use Express because It: 
1. listens for incoming Request 
2. parse the Request 
3. matches the response with the routes (for ex : google.com/search, Here search is a route , things after the '/' )
4. Give suitable Response back to the request made.

-> console.dir() => This method prints the whole directory 
-> Ports : These are the logical endpoints of a network connection that is used to exchange the information  between a web server and a client server 

-> When a server starts, we can stop it by ^C
-> app.use(req , res) => listens to every incoming request and act according to the callback given  {HAve two parameters} 
-> We can send the response by res.send() method.

********************   Routing *********************

Ex: https://www.amazon.in/mobile-phones/b/?ie=UTF8&node=1389401031&ref_=nav_cs_mobiles

-> app.use() : Keep running everytime (MiddleWares)
-> app.get() : if you found that route then run it only.
-> Basically setting the path for handling our requests and getting response of the request made.
-> It is process of selecting a path for traffic in a network or between or across multiple network
-> / gives the routes forward to forward
-> '/' only ==> home page 
-> We can not send too many responses for same path 


                        *****   Nodemon  *******

-> Nodemon is a package used to restart server automatically with code changes  
-> The best way to install the nodemon is to install it globally (npm i nodemon -g)
-> To run it use : npx nodemon script.js

                        *****   MiddleWares  *******

-> Whenever you request for something and then stop somewhere and perform some other thing or operation in middle, it is termed as MiddleWares
-> Path : request accepted on Server  ===>  MiddleWares  ===> Route Handler
Ex : app.use(function(req,res,next){
    console.log('I am a MiddleWares')
    next();         // very important to run the next function to forward it to the Route Handler
});

                        *****   Error Handling  *******

-> Basically we just have to run the next() function in the last MiddleWares or routing function and then write the Error Handling code and just print on console the Error
Ex : app.get("/profile",function(req,res,next){
    return next(new Error("Not important"))
}); 
 app.use((err,req,next)=>{
    console.error(err.stack)
    res.status(500).send('something broke!')
 })

 app.listen(3000);