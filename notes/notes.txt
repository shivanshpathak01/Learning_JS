-> JS is single threaded & Synchronous(Means a single task is performed at a time,No two tasks are performed at the same time, second task will be in queue until first one isn't completed) language and every thing is a Process in JS. 
-> Printing - Many variables at a time console.log([variable1,variable2,variable3]);
-> Object type  of null is object;
-> we use `${}` for Printing
-> In array functions, {arr.slice()  =>> Array doesn't get modified} , While in {arr.splice =>> Array get modified}
-> Array concatanation =>> 1. [...arr1,...arr2] Normal concatanation of two arrays   2.If we have to cancatanate the array inside the array inside array we use arr.flat(number of inside arrays) method         
-> Objects =>> 1. Keys are considered as strings, 2.Symbols are declared as {[mySymbol]:"hi"} 3. Instead of using .(dot) operator in some situations we can use console.log(user[variable1]) also  3. We can make the object unchangeable by Object.freeze(object name);
-> Objects inside objects can be accessed by using (.) dot operator 
-> To merge the objects like Arrays, we use Objects.assign(), ({},obj1,obj2...) We use {} so that the objects get merged easily and looks more professional but not necessarily imp
-> But the easiest way to merge the object is just like the arrays {...obj1,...obj2} 
-> By object.keys(), we can  convert the object into the arrays And also use Object.values() to get their respective values 
-> Destructuring of an Object in JS means changing its POV of calling means JavaScript.user will become user or myuser whatever easy name you want to give instead of typing JavaScript. every time 
-> For above concept, fun({destructured object}), curly braces are used 
-> JSON(JavaScript object notation) is for APIs(APIs handle the task of others)
-> Functions : function hello(){}, this is how the functions are being written 
-> hello, this is the referance, while hello(), this is the execution of the function.
-> In any function, if argument remains empty, automatically return undefined not null.
-> If in any function we have given one argument but i have to return more number of values then we use (...variableName) in function itself while passing the argument 
-> The above mentioned (...) is called REST operator {Previously used as spread operator for merging the arrays}.
-> If in above argument we pass (var1,var2,...num1), and pass 10 values in function then first two values will be assigned to the given two varibales(i.e. var1 and var2) and all the others will be then assigned by REST operator as mentioned above.
-> If any function being stored in any variable, it will be sometimes called Expression and if we call the variablein which it is stored above where it is written it will give me error because it was stored in a variable .
-> this Keyword is used to refer to current context means for ex. in this codeblock only, means when you will change the value of the variable, it will change
-> In Browser everything is stored under window object, So value for this in browser comes out to be under Window while in VS(node) it came out as {} - empty
-> In Arrow Function, If we wrap the values in {} we have to write return keyword, Else we don't need to write the return keyword
-> Brackets are usually used in these cases and they are mostly used in React 
-> IIFE(Immediately Invoked function Expression) used to remove the pollution caused by global scope variable And IIFE is invoked Immediately.
-> We wrap the function and next line which we want to execute like this ()().
-> Always use ; Semicolon in IIFE that tells it where to stop

/////***    How JS Programmes works    ***/////

-> 1.JS Execution Context => Firstly It is Global EC (this keyword is assigned there)=>{code}
-> 2.Function or Functional EC
-> 3.Eval EC  
-> Code is Executed like {}=>1.Memory Creation Phase or Creation Phase => Memory assigned in this Phase
-> 2. Execution Phase => Execution in this Phase
-> Let's Say there is a program where we have to add two numbers So the Execution is like :

//***       Phase 1st       ****///
Global execution Phase => Here this is assigned or given 

//***       Phase 2nd       ****///
Memory Phase 
Step1. undefined is assigned to both the variables (num1 = undefined,num2 = undefined)
Step2. defination of function is given to function's name
Step3. result is undefined yet and is stored in some variable (Let's call it result)

//***       Phase 3rd       ****///
Execution Phase 
Step1. values are assigned to both variables (num1 = 10,num2 = 2);
Step2. It goes to function and there a new variable environment + Execution thread is created
Step3. Result will be again returned to Global EC

-> In call stack of programmes here, LIFO is used (Firstly,Global EC,then fun1(),Fun2()...),means Fun2() will be taken out first after execution. (Refer to Video 25)
-> '===' Checks both the values as well as the datatype of values whether they are same or not.
-> In switch case,if the break statement is removed and if the value matches then every other statements below it gets executed except default case that's why break statement is there.
-> if we have check the strings in switch statement then we can write them at the place where we write case 1 as case "string";
-> if you do not have to give some condition in if-else statement just you have to place the variable there, and your code works for that we use truthy or falsy values there.
-> all the falsy values are listed below else others are truthy : 
    false, 0, -0, BigInt 0n, "", null, undefined, Nan
-> All the surprising truthy values : "0", 'false', " ", [],{},function(){}.
-> If we have to check whether the array is empty or not then check by (.length) operator, for ex. (arr1.length===0) log 
-> To check an empty Object, apply the same method as arrays mentioned above (Refer truthy.js)
/******                  Loops                      *******/
-> For-in,For-of,forEach,map ,These loops are designed specially for the arrays .
-> For-in : Iterate over object properties (keys).Ex. const car = { make: 'Toyota', model: 'Corolla', year: 2020 }; || console.log(key); // Outputs: make, model, year || console.log(car[key]); // Outputs: Toyota, Corolla, 2020
-> For-of : Iterate over iterable values (elements in an array, characters in a string, etc.). Ex. const fruits = ['apple', 'banana', 'cherry']; || console.log(fruit); // Outputs: apple, banana, cherry
-> Maps : More info in Maps.js
-> Maps can't be iterated normally.
-> forEach Callback function {in normal function}: arrayname.forEach(function (parameter) { } ) : will iterte over the array elements 
-> forEach Callback function {in arrow function}: arrayname.forEach( (parameter)=> { } ) 
-> if there is already a function is given, just give its referance not execute the function.
-> if there are a JSON file type thing is given and you have to find the value of it from key-value pair, then Always we use callback in arrow function and most important we access the values with (parameter.key).
-> Filter: means in the forEach Callback Arrow, We need a condition too which is served, very efficient.
-> If we put a curly braces while writing the function or anything other, we have to write return keyword else implicit return in same line.
-> When we use one function and again use another function, its called the function chaining and value from one function passes to another and then another then another.
-> Reduce function is basically used in the shopping carts to calculate the bills etc., It always starts with a initialvalue which we have to give to it.

/*********        DOM Manipulation           **********/

-> Nodelists,HTML collections etc. are not a Array, They just looks like they are array and also in their prototype, forEach is there but map is not there. Means you can not treat them as arrays. 
-> document.getElementById.setAttribute() will always override the values independent of what was the value given previously.
-> title.innerText : It includes all the text that are visible on the screen.
-> title.textContent : It includes all the contents that are available not only the visible ones.
-> title.textHTML : It includes all the HTML (If any) that are available.
-> document.querySelector() : selects exactly like the Selectors in CSS, used to select and return the elements, But selects only one value.
-> document.querySelectorAll() : Returns the value in Nodelists not a single element, so you can not apply the properties unless you specify the element on which you want to apply the properties just like the arrays i.e. myH[0].
-> To convert any method or function to array => Array.from(Nodelists)
-> Basically these selectors and all are for targetting some element or values 
-> In DOM, if you are even giving a space or a line break it is counted in nodes specifically speaking childNodes. 
-> document.createElement() : To Create an object in the DOM we use this.

************ Object Creation and DOM Manipulation ************
-> let div = document.createElement('div');
    console.log(div);
    div.className = "Shivansh";          => assigns className shivansh to the div
    div.id = Math.random();              => assigns random number to the div  
    div.setAttribute("title", "My title")  => assigns different attributes, Works like key value pair
    div.style.backgroundColor= "Red";     => we can style also like this.
    // div.innerText = "Shivansh Pathak";
    let addText = document.createTextNode("Hello Hello")
    div.appendChild(addText);
    // div.innerText = "Shivansh Pathak";       => To give innerText to the docs
    let addText = document.createTextNode("Hello Hello")
    div.appendChild(addText);                   => To give innerText to docs 
    -> Both of the above methods are used to give innertext but some people say second one is more efficient because it directly go and set the text while in the first one itb firstly go and take the values then override them, basically it take a round trip and take more time But there is a debate.
    -> Used to attach this to the document   =>  "document.body.appendChild(div)"

**********/            Adding or editing in DOM                 /*****
Normal way of Adding new languages to DOM -> In this method, whole tree is traversed in order to perform the operation , So instead of using innerHTML approach Go with Optimized approach that is listed after the code of this approach

function addLanguage(langName){
        const li = document.createElement('li');
        li.innerHTML = `${langName}`
        document.querySelector('.language').appendChild(li)
    }
    addLanguage("python")
    addLanguage("Java")

    // Optimized way of adding more things to DOM 

    function addOptiLanguage(langName){
        const li = document.createElement('li');
        li.appendChild(document.createTextNode(langName))
        document.querySelector('.language').appendChild(li)
    }    

    // Edit element 
-> replaceWith() : is a method used to edit the elements in DOM
-> firstLang.outerHTML = '<li> TypeScript</li>' : method is used to change whole HTML of any document 
-> variableName.remove() : used for simply removing a element or something you want to remove 
  
   /*********       Event Handling       *********/

-> eventname.preventDefault() : Used to prevent the default working of event 
-> We can use parseInt to parse the values to Integer 
-> if we have to use Nan then instead of that, use isNan(), it is more efficient as well as more recommended
-> we can use both document.querySelector or document.getElementById
-> setInterval(function (){},1000) : use to make the values run for every second, also values can be changed

/***********            Events                 ************/
-> Approach -1 : previously used in jQuery - on event 
-> Approach 0 : attachEvent - used previously on Internet Explorer, Now A days not used 
-> Approach 1 : Never Inject the Onclick or any other event to HTML structure directly, It is not scalable in JS , While in ReactJs they are scalable in some scenearios.
-> Approach 2 :Rather than following the above approach, Simply select the element (document.getElementById) and then Inject your events.
-> Approach 3 (Best one): Using event listener  
-> Some times in Event listener function you have to give a third parameter true or false (and its default value is false) , It is only written there because some of the applications do not run until you give them true or false 
*** Important : Sometimes in interviews, We will be asked to create a Circle, rectangle etc. where we click, Also tell me the time stamps when the user clicked on the screen, These questions can be solved using events, If you console.log the event you will get all the details of the event happening and from there you can find and solve these types of questions.
*** Important topics related to Events for interviews :     // type, timestamp, defaultPrevented
                                                            // target, toElement, srcElement, currentTarget,
                                                            // clientX, clientY, screenX, screenY
                                                            // altkey, ctrlkey, shiftkey, keyCode
-> Capturing : outside to inside      
-> Bubbling Up : means when two event are invoked, then events invoked in the fashion of bubble, like inside to outside  
-> To stop event Bubbling, use eventname.stopPropagation() 
-> .remove() : used as remove event to remove the element you selected.
-> Tagname in Events : Describes which type of element it is 
-> We can also use if else statements to check if we want to remove something or not 
-> Both Synchronous(Blocking type) and Asynchronous(Non Blocking type) type of code is necessary for us as per their use cases.
-> Fetch APIs : Works like normal APIs but have a high Priority to than normal task queue processes.
-> setTimeOut() : Used to set the time after which the task is going to happen 
-> clearTimeout() : Used to clear all the previously set timeout things 
  *********     Code snippet       ********
  const changeMe = function (){
        document.querySelector('h1').innerHTML = "The Shivansh Pathak"
        }
        // setTimeout(changeMe,3000);
        document.querySelector('#stop').addEventListener('click',function(){
            clearTimeout(changeMe)
            console.log('Stopped');
        })

-> setInterval : After a interval of time what task should be executed
-> clearTimeout : Clears setInterval, means stops the execution.
-> After completion of our task we can assign null to the variables to make them free; means just like c++ to make the code effiecient and professional we have to free the variables.
-> Also in this process, if we can use conditionals (if, else) then that will be very Good for whole codebase
-> JSON.parse() : will convert the data (for ex. string) to JSON type.
-> V8 engine runs the JS. For more details refer to video 39.
-> API Request => Revise again 
****************           Promises                 *****************
-> "Producing code" is code that can take some time
-> "Consuming code" is code that must wait for the result
-> A Promise is an Object that links Producing code and Consuming code
-> Promises : are the objects resulting in eventual completion or failure of an Asynchronous operationand its resulting value.
-> Basic structure of Promises :new Promise(function(){}); 
-> for more detailed just check the file of promises.js 
-> .then().theh => called chaining means function 1's outcome will pass to function 2 and its outcome to 3 and so on .
-> .catch() => catches the errors 
-> .finally()=> will run always and it means that tell the program that either your work is done or not 

**************           Async Await              ***************

-> if you write async in front of any function it will Always return a promise .If you return a promise it will wrap around the value and return a promise 
-> async : makes a function return a Promise
-> await : makes a function wait for a Promise
-> fetch() : network based request
-> important : if a request got a 404 error or any other error, it will always be treated as response, can't be treated as error, it is treated as error only if browser was unable to request it

************         OOPS      *******************
.this : this keyword is used to refer current context
-> .this refer current context of functions also not just only in constructors.
-> if we do console.log(this), itb will give us the object which is acting as the current content 
-> We use new keyword always as it gives us a constructer function, otherwise normally our values get overrided, instead of writing the function only  
-> constructor is just the referance of the object
->  

**************         Prototype            ***************
-> Everything in js is object, even  functions are also objects (Refer to Objects.js in OOPs)
-> Function -----> Objects --------> null
-> Array -----> Objects --------> null
-> Strings -----> Objects --------> null   {Shown below :) }
-> Prototype : Every object in JavaScript has a built-in property, which is called its prototype. The prototype is itself an object, so the prototype will have its own prototype, making what's called a prototype chain. The chain ends when we reach a prototype that has null for its own prototype.
-> Here's what happens behind the scenes when the new keyword is used:       (For referance use Objects.js in OOPs)
A new object is created: The new keyword initiates the creation of a new JavaScript object.
A prototype is linked: The newly created object gets linked to the prototype property of the constructor function. This means that it has access to properties and methods defined on the constructor's prototype.
The constructor is called: The constructor function is called with the specified arguments and this is bound to the newly created object. If no explicit return value is specified from the constructor, JavaScript assumes this, the newly created object, to be the intended return value.
The new object is returned: After the constructor function has been called, if it doesn't return a non-primitive value (object, array, function, etc.), the newly created object is returned.
-> Objects.setPrototypeOf(child,parent) : Used in inheritance, Parent's properties are now inherited by child
Important : When we have window object access, this here refers to window object But in node environment we get empty object 
-> .call() Method : used to hold the referance for the further use and holding its execution context
-> .call(), when we pass this in this function of call, it holds back the value and referance
-> extend keyword is used for the inheritance here also 
-> By using Bind we can send all the things that was't available to send 

-> Object.getOwnPropertyDescriptor : The Object.getOwnPropertyDescriptor() static method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.

Note : Some properties of some Objects kept permanent that no can change them like :- Value of PI 
So you can make your own Object's properties so that no one can change that by changing the enumerable and writable options (referance: MathPI.js) 

Important : Many times we need to handle the situations where we have to handle the errors , so there we can check the typeof in if statement and check if this thing is of some specific type then only it should get printed 
-> 